//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

bool hasCARGO      = true;

vector<string> cargo.materials =
  { 
  };

string cargo.extFile          =    "";

int    cargo.geomType         =    00;   //decimal digit:magior version, unit digit:minor version  
                                       //  00:dummy geometry, the ladder has cylindrical shape instead of plane, there are no supports and others details

//double cargo.voxelization     =     0;   //Choose voxelization method for the gas volumes that contain wires, negative: default computation, 0: voxelization off, positive: smartless value

bool   cargo.doDetailedSurfCheck = false;
bool   cargo.debugLayer       = false;

//Elemetn postion is evaluated from a back lover corner

//Box elements description
int cargo.nBxKindEl                          = 1;
vector<double> cargo.BxKindLength            = { 1000 };
vector<double> cargo.BxKindWidth             = { 1000 };
vector<double> cargo.BxKindHeight            = { 100 };
vector<int> cargo.BxKindShape                = { 0 }; //0:full, 1: shell
vector<double> cargo.BxKindThickness         = { 0.0 }; //if the corresponding Shape is full the thickness value is ignored
vector<string> cargo.BxKindEqMaterial        = { "G4_Pb" };
vector<int> cargo.BxKindIsTarget             = { 1 }; //Flag 0:normal element, 1:"radioactive" source
vector<double> cargo.BxKindPosX              = { 1200.0 };
vector<double> cargo.BxKindPosY              = { 1050.0 };
vector<double> cargo.BxKindPosZ              = { 6000.0 };

//Cylinder elements description
int cargo.nCylKindEl                         = 0;
vector<double> cargo.CylKindLength           = {};
vector<double> cargo.CylKindInnerRadius      = {};
vector<double> cargo.CylKindOuterRadius      = {};
vector<int> cargo.CylKindShape               = {}; //0:full, 1: shell
vector<double> cargo.CylKindThickness        = {}; //if the corresponding Shape is full the thickness value is ignored
vector<int> cargo.CylKindOrientation         = {}; //Length along 0: Z, 1: Y: 2: X
vector<string> cargo.CylKindEqMaterial       = {};
vector<int> cargo.CylKindIsTarget            = {}; //Flag 0:normal element, 1:"radioactive" source
vector<double> cargo.CylKindPosX             = {};
vector<double> cargo.CylKindPosY             = {};
vector<double> cargo.CylKindPosZ             = {};

//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
